Q1)What is File Function in Python? What is keywords to create and write files?
Ans) File Function in python is used for working with files. The key function for working with files in Python is the open() function. 
"w" - Write - will overwrite any existing content.

"a" - Append - will append to the end of the file.

Que 13	Explain Exception handling? What is an Error in Python?
Ans:	Exception handling : If you have some suspicious code that may raise a exception, you can defend your program by placing the suspicious code in a try: block. After the try: block, include an except: statement, followed by a block of code which handles the problem as elegantly as possible.
Error : Errors are the problems in a program due to which the program will stop the execution

Que 14	How many except statements can a try-except block have? Name Some built-in exception classes.
Ans:	At least one except statement is required.
Name of buit-in exception classes :  Arithmetic Error, Exception, Name Error Index Error, Attribute Error, etc....	

Que 15	When will the else part of try-except-else be executed?
Ans:	The else part is executed when no exception occurs. When Else was executed if any condition is not satisfied in program.....

Que 16	Can one block of except statements handle multiple exception?
Ans:	Yes, a single block of except statements in Python can handle multiple exceptions. 
	
         Example:--
	try:
	    x = 10 / 0
             y = int("abc")

        except (ZeroDivisionError, ValueError) as e:
		   print("An error occurred:", str(e))

Que 17	When is the finally block executed?
Ans:	Finally block is always executed whether an exception is handled or not. Therefore, it contains all the necessary statements that 	need to be printed regardless of the exception occurs or not.

Que 18	What happens when „1‟== 1 is executed?
Ans:	It simply evaluates to False and does not raise any exception.

Que 21	What are oops concepts?
Ans:	An object-oriented paradigm is to design the program using classes and objects. The object is related to real-word entities such as book, house, pencil, etc. The oops concept focuses on writing the reusable code. It is a widespread technique to solve the problem by creating objects.

Python OOP Concepts : 
	(1)Class
	(2)Object
	(3)Encapsulation	
	(4)Inheritance
      	(5)Polymorphism
	(6)Abstraction
	(7)Constraction

Que 22	How to Define a Class in Python? What Is Self? Give An Example Of A Python Class
Ans:	class : class is a blueprint for creating objects.
Self :  It is refers to the instance of the class and
           When you create an instance of the class, it  
           is passed automatically,and you can access 
           the instance's attributes and methods using    
           it.
class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

d1 = Dog(name="Moti", age=2)
d2 = Dog(name="Sher", age=4)

print(f"{d1.name} is {d1.age} years old.")
print(f"{d2.name} is {d2.age} years old.")

Que 26	What is Instantiation in terms of OOP terminology?
Ans:	In OOP, instantiation is the process of creating instances (objects) of a class,allowing you to work with specific,individual entities based on the defined class structure.

Que 27	What is used to check whether an object o is an instance of class A?
Ans:	In Python, you can use the isinstance() function to check whether an object is an instance of a particular class. 
The isinstance() function returns True if the object is an instance of the specified class or a tuple of classes, and False otherwise.

   Example:--
	class B:
    		pass	
	
	obj = B()
	result = isinstance(obj, B)
	print(result)
Que 28	What relationship is appropriate for Course and Faculty?
Ans:	Association relationship
Que 29	What relationship is appropriate for Student and Person?
Ans:	Inheritance relationship



Q.19 How Do You Handle Exceptions With Try/Except/Finally In Python? Explain with coding snippets.

ANS: In Python, the try, except, and finally blocks are used for exception handling. Here's how you can use them:
1.	try block: You put the code that might raise an exception inside this block.
2.	except block: You specify the code to execute if an exception occurs within the try block.
3.	finally block: This block is optional. It allows you to execute code whether an exception occurred or not. It's typically used for cleanup tasks.

try:
    # Code that might raise an exception
    x = int(input("Enter a number: "))
    result = 10 / x
    print("Result:", result)

except ValueError:
    # This block will execute if a ValueError occurs
    print("Please enter a valid number.")

except ZeroDivisionError:
    # This block will execute if a ZeroDivisionError occurs
    print("Cannot divide by zero.")

finally:
    # This block will always execute, regardless of whether an exception occurred or not
    print("This code always runs, regardless of exceptions.")

